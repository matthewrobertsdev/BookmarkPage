{"version":3,"sources":["Actions.tsx","BookmarkReducer.tsx","BookmarkGrid.tsx","ToolBar.tsx","LinkModel.tsx","EntryModal.tsx","MoreModal.tsx","App.tsx","serviceWorker.js","BookmarkStore.tsx","index.js"],"names":["BookmarkUpdateInfo","index","bookmark","this","setMode","payload","type","setBookmarks","setUpdatingName","setUpdatingURL","initialState","bookmarks","localStorage","getItem","undefined","savedBookmarks","JSON","parse","e","getSavedBookmarks","mode","checkedArray","numChecked","updateingBookmark","needsPassBookmark","updatingURL","updatingName","updatingIndex","validateBookmarks","validatedBookmarks","i","length","name","URL","push","saveBookmarks","setItem","stringify","bookmarkReducer","state","action","console","log","newBookmarks","slice","unshift","newCheckedState","keptBookmarks","updatedBookmarks","withAppend","concat","UnconnectedBookmarkGrid","props","changeIndices","bind","numColumns","Math","floor","window","innerWidth","resizeFunction","addEventListener","setState","sourceId","sourceIndex","targetIndex","targetId","nextState","swap","GridContext","onChange","GridDropZone","id","boxesPerRow","rowHeight","style","height","getHeightString","width","touchAction","getTouchActionString","cursor","textAlign","marginLeft","marginRight","disableDrag","isRearrangeMode","disableDrop","className","getBookmarkGrid","map","item","GridItem","key","getGridItemStyleObject","onClick","updateBookmark","addForDelete","href","toString","checked","toggleCheckedState","setUpdatingIndex","pointer","display","borderRadius","padding","marginTop","React","Component","BookmarkGrid","connect","dispatch","UnconnectedToolBar","getRearrangeButtonColorStyle","toggleRearrangeMode","getDeleteButtonColorStyle","handleDeleteClick","getDeleteString","addCancelButton","getEditButtonColorStyle","handleEditClicked","getAddButtonColorStyle","toggleAddMode","getMoreButtonColorStyle","toggleMoreMode","handleCancelClick","createUncheckedArray","deleteChecked","changeEditMode","Toolbar","LinkModel","ReactModal","setAppElement","UnconnectedEntryModal","handleNameChange","handleURLChange","handleSubmit","event","target","value","addBookmark","clearUpdatingBookmark","isOpen","getTitleString","getSubmitString","handleCancel","EntryModal","UnconnectedMoreModal","handleSaveClick","handleLoadMoreClick","handleLoadAndReplaceClick","append","reader","FileReader","file","loadMoreInput","document","getElementById","files","result","appendBookmarks","readAsText","downloadLink","Blob","download","createObjectURL","click","loadMoreButton","handleFileChosen","loadAndReplaceButton","MoreModal","UnconnectedApp","handleKeyDown","handleSearch","searchText","searchEngine","getInitialSearchEngine","handleSearchEngineChange","handleSearchChange","open","preventDefault","ToolBar","tabIndex","onKeyDown","getBookmarkContent","App","Boolean","location","hostname","match","bookmarkStore","createStore","title","bookmarkPage","store","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed806f96.chunk.js","sourcesContent":["import LinkModel from \"./LinkModel\";\n\nexport class BookmarkUpdateInfo {\n  index: number\n  bookmark: LinkModel\n  constructor(index: number, bookmark: LinkModel) {\n    this.index=index\n    this.bookmark=bookmark\n  }\n}\n\nexport const setMode = (payload: string) => ({ type: 'SET_MODE', payload });\n\nexport const setBookmarks = (payload: LinkModel[]) => ({ type: 'SET_BOOKMARKS', payload });\n\nexport const addBookmark = (payload: LinkModel) => ({ type: 'ADD_BOOKMARK', payload });\n\nexport const createUncheckedArray = (payload: any) => ({ type: 'CREATE_UNCHECKED_ARRAY', payload});\n\nexport const toggleCheckedState = (payload: number) => ({ type: 'TOGGLED_CHECKED_STATE', payload });\n\nexport const deleteChecked = (payload: any) => ({ type: 'DELETE_CHECKED', payload});\n\nexport const setUpdatingName = (payload: string) => ({ type: 'SET_UPDATING_NAME', payload});\n\nexport const setUpdatingURL = (payload: string) => ({ type: 'SET_UPDATING_URL', payload});\n\nexport const setUpdatingIndex = (payload: number) => ({ type: 'SET_UPDATING_INDEX', payload});\n\nexport const updateBookmark = (payload: BookmarkUpdateInfo) => ({ type: 'UPDATE_BOOKMARK', payload});\n\nexport const appendBookmarks = (payload: LinkModel[]) => ({ type: 'APPEND_BOOKMARKS', payload});\n\n\n","import LinkModel from \"./LinkModel\";\ninterface Action{\n  type: string,\n  payload: any\n}\nconst initialState = { bookmarks: getSavedBookmarks(), mode: 'none', checkedArray: [] as boolean[], numChecked: 0,\nupdateingBookmark: null, needsPassBookmark: false, updatingURL: '', updatingName: '', updatingIndex: null};\n\nconst bookmarkReducer = (state = initialState, action: Action) => {\n    switch (action.type) {\n        case 'SET_UPDATING_NAME':\n                return { ...state, updatingName: action.payload}\n        case 'SET_UPDATING_URL':\n                return { ...state, updatingURL: action.payload}\n        case 'SET_MODE':\n            return { ...state, mode: action.payload };\n        case 'SET_BOOKMARKS':\n            var validatedBookmarks=validateBookmarks(action.payload);\n            saveBookmarks(validatedBookmarks);\n            return { ...state, bookmarks: validatedBookmarks }\n        case 'ADD_BOOKMARK':\n          console.log(\"hello\")\n            let newBookmarks=[]\n            if (state.bookmarks!==null){\n                newBookmarks = state.bookmarks.slice(0);\n                newBookmarks.unshift(action.payload);\n                console.log(newBookmarks)\n            } else {\n                newBookmarks=[action.payload]\n            }\n            saveBookmarks(newBookmarks);\n            return { ...state, bookmarks: newBookmarks }\n        case 'CREATE_UNCHECKED_ARRAY':\n            let checkedArray = []\n            for (let i = 0; i < state.bookmarks.length; i++) {\n                checkedArray.push(false)\n            }\n            return { ...state, checkedArray: checkedArray, numChecked: 0}\n        case 'TOGGLED_CHECKED_STATE':\n            let newCheckedState = state.checkedArray.slice(0);\n            newCheckedState[action.payload] = !newCheckedState[action.payload]\n            let numChecked = 0;\n            for (let i = 0; i < newCheckedState.length; i++) {\n                if (newCheckedState[i]) {\n                    numChecked += 1;\n                }\n            }\n            return { ...state, checkedArray: newCheckedState, numChecked: numChecked }\n        case 'DELETE_CHECKED':\n            let keptBookmarks = [];\n            for (let i = 0; i < state.bookmarks.length; i++) {\n                if (!state.checkedArray[i]) {\n                    keptBookmarks.push(state.bookmarks[i])\n                }\n            }\n            saveBookmarks(keptBookmarks);\n            return { ...state, bookmarks: keptBookmarks, numChecked: 0 }\n        case 'SET_UPDATING_INDEX':\n                return {...state, index: action.payload}\n        case 'UPDATE_BOOKMARK':\n                let updatedBookmarks=state.bookmarks\n                updatedBookmarks[action.payload.index]=action.payload.bookmark\n                saveBookmarks(updatedBookmarks);\n                return { ...state, bookmarks: updatedBookmarks}\n        case 'APPEND_BOOKMARKS':\n                let withAppend=state.bookmarks.concat(validateBookmarks(action.payload));\n                saveBookmarks(withAppend);\n                return { ...state, bookmarks: withAppend}\n        default:\n            return state;\n    }\n\n}\n\nexport const validateBookmarks=function validateBookmarks(bookmarks: LinkModel[]){\n    var validatedBookmarks=[];\n    for(let i=0; i<bookmarks.length; i++){\n        if (bookmarks[i].name&&bookmarks[i].name!==null&&bookmarks[i].name!==undefined&&bookmarks[i].name!==''\n        &&bookmarks[i].URL&&bookmarks[i].URL!==null&&bookmarks[i].URL!==undefined&&bookmarks[i].URL!==''){\n            validatedBookmarks.push(bookmarks[i]);\n        }\n    }\n    return validatedBookmarks;\n}\n\nexport const saveBookmarks=function saveBookmarks(bookmarks: LinkModel[]) {\n    localStorage.setItem('savedBookmarks', JSON.stringify(bookmarks))\n}\n\nfunction getSavedBookmarks() {\n    if (localStorage.getItem('savedBookmarks') !== null&&localStorage.getItem('savedBookmarks')!==undefined) {\n        try{\n          let savedBookmarks=localStorage.getItem('savedBookmarks')\n          if (savedBookmarks==null) {\n            savedBookmarks=\"\"\n          }\n            return JSON.parse(savedBookmarks);\n        } catch(e){\n            return [];\n        }\n    } else {\n        return [];\n    }\n}\n\nexport default bookmarkReducer","import React from 'react';\nimport './app.css';\nimport { GridContextProvider, GridDropZone, GridItem, swap } from \"react-grid-dnd\";\nimport { connect } from 'react-redux';\nimport {\n    setBookmarks, toggleCheckedState, setMode, setUpdatingIndex, setUpdatingName,\n    setUpdatingURL\n} from './Actions'\nimport { saveBookmarks } from './BookmarkReducer';\nimport LinkModel from './LinkModel';\ninterface State {\n  bookmarks: LinkModel[],\n  mode: string,\n  checkedArray: boolean[],\n  numColumns: number\n}\ninterface Props {\n  bookmarks: LinkModel[],\n  setBookmarks: (nextState: LinkModel[])=>void,\n  mode: string,\n  setMode: (mode: string)=>void,\n  checkedArray: boolean[],\n  toggleCheckedState: (index: number)=>void,\n  setUpdatingIndex: (index: number)=>void,\n  setUpdatingName: (updatingName: string)=>void\n  setUpdatingURL: (updatingURL: string)=>void\n}\nconst mapStateToProps = (state: State) => {\n    return {\n        bookmarks: state.bookmarks, mode: state.mode,\n        checkedArray: state.checkedArray\n    }\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setBookmarks: (bookmarks: LinkModel[]) => { dispatch(setBookmarks(bookmarks)); },\n        toggleCheckedState: (index: number) => { dispatch(toggleCheckedState(index)); },\n        setMode: (mode: string) => { dispatch(setMode(mode)); },\n        setUpdatingIndex: (index: number) => { dispatch(setUpdatingIndex(index)) },\n        setUpdatingName: (name: string) => { dispatch(setUpdatingName(name)); },\n        setUpdatingURL: (URL: string) => { dispatch(setUpdatingURL(URL)) }\n    }\n};\nclass UnconnectedBookmarkGrid extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.changeIndices = this.changeIndices.bind(this);\n        this.state={...this.state, numColumns: Math.floor(window.innerWidth/400)+1};\n        this.resizeFunction=this.resizeFunction.bind(this);\n        window.addEventListener('resize', this.resizeFunction);\n    }\n\n    resizeFunction(){\n        let numColumns=Math.floor(window.innerWidth/400)+1\n        if(this.state.numColumns!==numColumns){\n            this.setState({numColumns: numColumns});\n        }\n    }\n\n    // target id will only be set if dragging from one dropzone to another.\n    changeIndices(sourceId: string, sourceIndex: number, targetIndex: number, targetId?: string) {\n        const nextState = swap(this.props.bookmarks, sourceIndex, targetIndex);\n        this.props.setBookmarks(nextState);\n        saveBookmarks(nextState);\n    }\n\n    render() {\n        return (<GridContextProvider onChange={this.changeIndices}>\n            <GridDropZone id=\"items\" boxesPerRow={this.state.numColumns} rowHeight={40}\n                style={{\n                    height: this.getHeightString(), width: '80%', touchAction: this.getTouchActionString(), cursor: 'default',\n                    textAlign: 'center', marginLeft: '10%', marginRight: '10%'\n                }}\n                disableDrag={!this.isRearrangeMode()} disableDrop={!this.isRearrangeMode()} className='bookmark-grid'>\n                {this.getBookmarkGrid()}\n            </GridDropZone>\n        </GridContextProvider>);\n    }\n\n    getBookmarkGrid() {\n        return this.props.bookmarks.map((item: LinkModel, index: number) => {\n            if (this.props.mode === 'rearrange') {\n                return <GridItem key={index}>\n                    <label style={this.getGridItemStyleObject('none', 'default')}\n                        className='link-button'>\n                        {item.name}\n                    </label> </GridItem>\n            } else if (this.props.mode === 'edit' || this.props.mode === 'update') {\n                return <GridItem key={index}>\n                    <label style={this.getGridItemStyleObject('none', 'default')}\n                        className='link-button' onClick={() => { this.updateBookmark(index, item) }}>\n                        {item.name}\n                    </label> </GridItem>\n\n            } else {\n                return <GridItem key={index}>\n                    {this.addForDelete(index)}\n                    <a href={item.URL} style={this.getGridItemStyleObject('default', 'pointer')}\n                        className='link-button'>\n                        {item.name}\n                    </a> </GridItem>\n            }\n        })\n    }\n\n    getHeightString() {\n        let effectiveLength=0;\n        if (this.props.bookmarks.length%this.state.numColumns!==0){\n            effectiveLength=this.props.bookmarks.length+\n            (this.state.numColumns-this.props.bookmarks.length%this.state.numColumns);\n        } else {\n            effectiveLength=this.props.bookmarks.length;\n        }\n        return (effectiveLength * (40/this.state.numColumns)).toString() + 'px';\n    }\n\n    getTouchActionString() {\n        return this.isRearrangeMode() ? 'none' : 'default';\n    }\n\n    getCursorString() {\n        return this.isRearrangeMode() ? 'default' : 'pointer';\n    }\n\n    isRearrangeMode() {\n        return this.props.mode === 'rearrange'\n    }\n\n    addForDelete(index: number) {\n        if (this.props.mode === 'delete') {\n            return <input type='checkbox' checked={this.props.checkedArray[index]}\n                onChange={() => this.props.toggleCheckedState(index)} className='delete-check-box'></input>\n        }\n    }\n\n    updateBookmark(index: number, bookmark: LinkModel) {\n        this.props.setMode('update');\n        this.props.setUpdatingIndex(index);\n        this.props.setUpdatingName(bookmark.name);\n        this.props.setUpdatingURL(bookmark.URL);\n    }\n\n    getGridItemStyleObject(touchAction: string, pointer: string){\n        return {\n            height: \"50%\", display: 'inline-block', touchAction: touchAction,\n            cursor: pointer, borderRadius: '10px', padding: '3px 11px', marginTop: '8px'\n        }\n    }\n\n}\nconst BookmarkGrid = connect(mapStateToProps, mapDispatchToProps)(UnconnectedBookmarkGrid)\nexport default BookmarkGrid;\n\n//style={{ cursor: 'default', marginLeft: '0px', marginRight: '0px' }}","import React from 'react'\nimport './app.css'\nimport {setMode, createUncheckedArray, deleteChecked} from './Actions'\nimport { connect } from 'react-redux'\nimport LinkModel from './LinkModel'\ninterface State {\n  mode: string,\n  bookmarks: LinkModel[],\n  numChecked: number\n}\ninterface Props {\n  mode: string,\n  setMode: (mode: string)=>void,\n  numChecked: number,\n  createUncheckedArray: ()=>void,\n  deleteChecked: ()=>void\n}\nconst mapStateToProps = (state: State) => { return {mode: state.mode, bookmarks: state.bookmarks,\nnumChecked: state.numChecked} };\nconst mapDispatchToProps = (dispatch: any) => {\n    return { setMode: (mode: string) => { dispatch(setMode(mode)); },\n    createUncheckedArray: () => { dispatch(createUncheckedArray('')); },\n    deleteChecked: () => { dispatch(deleteChecked(''));} }};\nclass UnconnectedToolBar extends React.Component<Props, State>{\n\n    render(){return (\n        <ul className='tool-bar'>\n        <li className={'tool-item '+this.getRearrangeButtonColorStyle()}\n        onClick={()=>this.toggleRearrangeMode()}>Rearrange</li>\n        <li className={'tool-item '+this.getDeleteButtonColorStyle()}\n        onClick={()=>this.handleDeleteClick()}>{this.getDeleteString()}</li>\n        {this.addCancelButton()}\n        <li className={'tool-item '+this.getEditButtonColorStyle()} \n        onClick={()=>this.handleEditClicked()}>Edit</li>\n        <li className={'tool-item '+this.getAddButtonColorStyle()} \n        onClick={()=>this.toggleAddMode()}>Add</li>\n        <li className={'tool-item '+this.getMoreButtonColorStyle()} \n        onClick={()=>this.toggleMoreMode()}>More</li>\n        </ul>\n        );};\n\n    getAddButtonColorStyle(){\n        return this.props.mode==='add' ? 'tool-item-selected add-button-selected':'add-button';\n    }\n\n    getRearrangeButtonColorStyle(){\n        return this.props.mode==='rearrange' ? 'tool-item-selected rearrange-button-selected':'rearrange-button';\n    }\n\n    getDeleteButtonColorStyle(){\n        return this.props.mode==='delete' ? 'tool-item-selected delete-button-selected':'delete-button';\n    }\n\n    getEditButtonColorStyle(){\n        return (this.props.mode==='edit'||this.props.mode==='update') ? 'tool-item-selected edit-button-selected':'edit-button';\n    }\n\n    getMoreButtonColorStyle(){\n        return this.props.mode==='more' ? 'tool-item-selected more-button-selected':'more-button';\n    }\n\n    toggleAddMode(){\n        if (this.props.mode==='add'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('add')\n        }\n    }\n\n    toggleMoreMode(){\n        if (this.props.mode==='more'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('more')\n        }\n    }\n\n    toggleRearrangeMode(){\n        if (this.props.mode==='rearrange'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('rearrange')\n        }\n    }\n\n    changeEditMode(){\n        if (this.props.mode==='edit'){\n            this.props.setMode('none')\n        } else if (this.props.mode==='update'){\n            this.props.setMode('edit')\n        } else if (this.props.mode==='none'){\n            this.props.setMode('edit')\n        } else{\n            this.props.setMode('edit')\n        }\n    }\n\n    addCancelButton(){\n        if (this.props.mode==='delete'){\n            return <li className='tool-item cancel-button' onClick={()=>{this.handleCancelClick()}}>Cancel</li>\n        }\n    }\n\n    handleCancelClick(){\n        this.props.setMode('none');\n        this.props.createUncheckedArray();\n    }\n\n    handleDeleteClick(){\n        if(this.props.mode!=='delete'){\n            this.props.createUncheckedArray();\n            this.props.setMode('delete');\n        } else {\n            if(this.props.numChecked>0){\n                this.props.deleteChecked();\n            }\n            this.props.setMode('none');\n        }\n    }\n\n    handleEditClicked(){\n        this.changeEditMode()\n    }\n\n    getDeleteString(){\n        if (this.props.numChecked===0){\n            return 'Delete';\n        } else {\n            return 'Delete ('+this.props.numChecked.toString()+')'\n        }\n    }\n\n}\n\nconst Toolbar = connect(mapStateToProps, mapDispatchToProps)(UnconnectedToolBar)\nexport default Toolbar;","class LinkModel{\n    name: string\n    URL: string\n    constructor(name: string, URL: string){\n        this.name=name;\n        this.URL=URL;\n    }\n}\nexport default LinkModel;","import React from 'react';\nimport './app.css';\nimport ReactModal from 'react-modal';\nimport {setMode, addBookmark, setUpdatingName, setUpdatingURL, updateBookmark, BookmarkUpdateInfo} from './Actions'\nimport { connect } from 'react-redux';\nimport LinkModel from './LinkModel';\ninterface State {\n  mode: string,\n  updatingName: string,\n  index: number,\n  updatingURL: string,\n  updateBookmark: LinkModel,\n  bookmarks: LinkModel[]\n}\ninterface Props {\n  mode: string,\n  setMode: (mode: string) => void,\n  updatingName: string,\n  setUpdatingName: (name: string) => void,\n  updatingURL: string,\n  setUpdatingURL: (name: string) => void,\n  addBookmark: (bookmark: LinkModel) => void,\n  index: number,\n  updateBookmark: (index: number, bookmark: LinkModel) => void\n}\nconst mapStateToProps = (state: State) => { return {mode: state.mode,\n  updatingURL: state.updatingURL, updatingName: state.updatingName, index: state.index,\n  updateBookmark: state.updateBookmark, bookmarks: state.bookmarks}};\nconst mapDispatchToProps = (dispatch: any) => {\n return { setMode: (mode: string) => { dispatch(setMode(mode)); },\n  addBookmark: (bookmark: LinkModel) => { dispatch(addBookmark(bookmark)); },\n  setUpdatingName:(name: string)=>{dispatch(setUpdatingName(name)); },\n  setUpdatingURL:(URL: string)=>{dispatch(setUpdatingURL(URL)); },\n  updateBookmark:(index: number, bookmark: LinkModel)=>{dispatch(updateBookmark(new BookmarkUpdateInfo(index, bookmark))); }}}\n ReactModal.setAppElement('#root');\nclass UnconnectedEntryModal extends React.Component<Props, State>{\n\n    constructor(props: Props) {\n        super(props);\n    \n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n          this.props.setUpdatingName(event.target.value);\n      }\n\n      clearUpdatingBookmark(){\n        this.props.setUpdatingName('');\n        this.props.setUpdatingURL('');\n      }\n    \n      handleURLChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.props.setUpdatingURL(event.target.value)\n      }\n    \n      handleSubmit() {\n        if (this.props.updatingName!==''&&this.props.updatingURL!==''){\n            if(this.props.mode==='add'){\n              this.props.addBookmark(new LinkModel(this.props.updatingName, this.props.updatingURL));\n              this.props.setMode('none');\n            } else if (this.props.mode==='update'){\n              this.props.updateBookmark(this.props.index, new LinkModel(this.props.updatingName, this.props.updatingURL));\n              this.props.setMode('edit');\n            }\n            this.clearUpdatingBookmark();\n        } else {\n        }\n      }\n\n      handleCancel(){\n        if(this.props.mode==='add'){\n          this.props.setMode('none')\n        } else if((this.props.mode==='update')){\n          this.props.setMode('edit');\n        }\n        this.clearUpdatingBookmark();\n      }\n\n      render(){ return (<div>\n        <ReactModal className=\"action-modal\" isOpen={this.props.mode==='add'||this.props.mode==='update'} >\n          <h1 className='modal-text-size'>{this.getTitleString()}</h1>\n        <label className='modal-text-size'>Name:</label>\n        <br></br><input className='modal-small-input' value={this.props.updatingName} onChange={this.handleNameChange}/><br></br>\n        <label className='modal-text-size'>URL:</label>\n        <br></br><input className='modal-input' type='url' value={this.props.updatingURL} onChange={this.handleURLChange}/><br></br>\n        <button className=\"link-button action-button\" onClick={()=>this.handleSubmit()}>{this.getSubmitString()}</button>\n        <button className=\"link-button action-button\" onClick={()=>this.handleCancel()}>Cancel</button>\n        </ReactModal></div>\n    );};\n\n    getTitleString(){\n      if (this.props.mode==='add'){\n        return 'Add Bookmark:'\n      } else if (this.props.mode==='update'){\n        return 'Update Bookmark:'\n      }\n    }\n\n    getSubmitString(){\n      if (this.props.mode==='add'){\n        return 'Add'\n      } else if (this.props.mode==='update'){\n        return 'Update'\n      }\n    }\n\n}\nconst EntryModal = connect(mapStateToProps, mapDispatchToProps)(UnconnectedEntryModal)\nexport default EntryModal","import React from 'react';\nimport './app.css';\nimport ReactModal from 'react-modal';\nimport {setMode, appendBookmarks, setBookmarks} from './Actions'\nimport { connect } from 'react-redux';\nimport LinkModel from './LinkModel';\ninterface State {\n  mode: string,\n  bookmarks: LinkModel[]\n}\ninterface Props {\n  bookmarks: LinkModel[],\n  mode: string,\n  setMode: (mode: string)=>void\n  appendBookmarks: (bookmarks: LinkModel[]) => void\n  setBookmarks: (bookmarks: LinkModel[]) => void\n}\nconst mapStateToProps = (state: State) => { return {mode: state.mode, bookmarks: state.bookmarks}};\nconst mapDispatchToProps = (dispatch: any) => {\n return { setMode: (mode: string) => { dispatch(setMode(mode)); },\n appendBookmarks: (bookmarks: LinkModel[]) => { dispatch(appendBookmarks(bookmarks)); },\n setBookmarks: (bookmarks: LinkModel[]) => { dispatch(setBookmarks(bookmarks)); }}}\n ReactModal.setAppElement('#root');\nclass UnconnectedMoreModal extends React.Component<Props, State>{\n\n      render(){ return (<div>\n        <ReactModal className=\"action-modal\" isOpen={this.props.mode==='more'} >\n          <h1 className='modal-text-size-2'>More</h1>\n        <button id='downloadButton' className='link-button action-button' onClick={()=>this.handleSaveClick()}>Download as JSON Text File</button>\n        <br></br>\n        <button className='link-button action-button' onClick={()=>this.handleLoadMoreClick()}>\n        Load More from JSON Text</button><input id='loadMoreButton' type=\"file\"/>\n        <br></br>\n        <button className='link-button action-button' onClick={()=>this.handleLoadAndReplaceClick()}>\n        Load and Replace from JSON Text</button><input id='loadAndReplaceButton' type=\"file\"/>\n        <br></br>\n        <button className='link-button action-button' onClick={()=>this.props.setMode('none')}>Done</button>\n        <a href='save' id='downloadLink' style={{display: 'none'}}>No Show with CSS</a>\n        </ReactModal></div>\n    );};\n\n    handleFileChosen(append: boolean, props: Props){\n      let reader = new FileReader();\n      let file=null;\n      if(append){\n        let loadMoreInput=document.getElementById('loadMoreButton') as HTMLInputElement\n        if (loadMoreInput!==null) {\n          file = loadMoreInput.files![0] as Blob;\n        }\n      } else {\n        let loadAndReplaceInput=document.getElementById('loadAndReplaceButton') as HTMLInputElement\n          file = loadAndReplaceInput.files![0];\n      }\n      reader.addEventListener(\"loadend\", function() {\n        let bookmarks=JSON.parse(reader.result as string);\n        if(append){\n          props.appendBookmarks(bookmarks);\n        } else {\n          props.setBookmarks(bookmarks);\n        }\n      });\n      reader.readAsText(file!);\n    }\n\n    handleSaveClick(){\n      let downloadLink=document.getElementById('downloadLink') as HTMLAnchorElement\n      let file = new Blob([JSON.stringify(this.props.bookmarks)], {type: 'text/plain'});\n      downloadLink.download='bookmarks.txt';\n      downloadLink.href=URL.createObjectURL(file);\n      downloadLink.click();\n    }\n\n    handleLoadMoreClick(){\n      let loadMoreButton=document.getElementById('loadMoreButton') as HTMLButtonElement\n      loadMoreButton.addEventListener('change', ()=>this.handleFileChosen(true, this.props));\n      loadMoreButton.click();\n    }\n\n    handleLoadAndReplaceClick(){\n      let loadAndReplaceButton=document.getElementById('loadAndReplaceButton') as HTMLButtonElement\n      loadAndReplaceButton.addEventListener('change', ()=>this.handleFileChosen(false, this.props));\n      loadAndReplaceButton.click();\n    }\n\n}\nconst MoreModal = connect(mapStateToProps, mapDispatchToProps)(UnconnectedMoreModal)\nexport default MoreModal","import React from 'react';\nimport './app.css';\nimport BookmarkGrid from './BookmarkGrid';\nimport ToolBar from './ToolBar';\nimport EntryModal from './EntryModal';\nimport MoreModal from './MoreModal';\nimport { connect } from 'react-redux';\nimport LinkModel from './LinkModel';\ninterface State {\n  searchText: string,\n  searchEngine: string,\n  bookmarks: LinkModel[]\n}\ninterface Props {\n  bookmarks: LinkModel[]\n}\nconst mapStateToProps = (state: State) => { return {bookmarks: state.bookmarks} };\nclass UnconnectedApp extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state={...this.state, searchText: '', searchEngine: this.getInitialSearchEngine()}\n    this.handleSearchEngineChange = this.handleSearchEngineChange.bind(this)\n    this.handleSearchChange = this.handleSearchChange.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n    this.handleKeyDown=this.handleKeyDown.bind(this)\n  }\n  \n  handleSearchChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({searchText: event.target.value});\n  }\n\n  handleSearchEngineChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    this.setState({searchEngine: event.target.value});\n    localStorage.setItem(\"searchEngine\", event.target.value)\n  }\n\n  handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      this.handleSearch(event)\n    }\n  }\n\n  handleSearch(event: React.KeyboardEvent|React.MouseEvent) {\n    switch (this.state.searchEngine) {\n      case 'google':\n        window.open('https://www.google.com/search?q='+this.state.searchText, \"_self\");\n        break;\n      case 'duckduckgo':\n        window.open('https://www.duckduckgo.com/?q='+this.state.searchText+'&t=h_&ia=web', \"_self\");\n        break;\n      case 'bing':\n        window.open('https://www.bing.com/search?q='+this.state.searchText, \"_self\");\n        break;\n      default:\n        console.log(\"Invalid Search Engine\")\n    }\n    event.preventDefault();\n  }\n \n  render(){ return (<div><ToolBar/><EntryModal/><MoreModal/>\n      <br></br><br></br><br></br><br></br><br></br>\n      <div className='center'>\n        <select name=\"searchEngine\" id=\"searchEngine\" \n        className='search-select' value={this.state.searchEngine} \n        onChange={this.handleSearchEngineChange}>\n          <option value=\"google\">Google</option>\n          <option value=\"duckduckgo\">Duck Duck Go</option>\n          <option value=\"bing\">Bing</option>\n        </select >\n        <span className='spacer'></span>\n        <input className='search-input' tabIndex={1} value={this.state.searchText} \n        onChange={this.handleSearchChange} onKeyDown={this.handleKeyDown}></input>\n        <span className='spacer'></span>\n        <button tabIndex={2} onClick={this.handleSearch} className='search-button'>Search</button></div>\n      <h1 className='text-on-background'>Bookmarks</h1>\n      <br></br>{this.getBookmarkContent()}<br></br><br></br><br></br></div>\n  );};\n\n  getBookmarkContent(){\n    if (this.props.bookmarks!=null&&this.props.bookmarks.length>0){\n      return <BookmarkGrid/>\n    } else {\n      return <h1 className='text-on-background'>Tap or click the \"Add\" button to add a bookmark</h1>\n    }\n  }\n\n  getInitialSearchEngine(){\n    const searchEngine=localStorage.getItem(\"searchEngine\")\n    if (searchEngine===\"google\" || searchEngine===\"duckduckgo\" || searchEngine===\"bing\"){\n      return searchEngine\n    } else {\n      return \"google\"\n    }\n  }\n\n  \n}\nconst App = connect(mapStateToProps, null)(UnconnectedApp)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore} from \"redux\";\nimport bookmarkReducer from './BookmarkReducer';\nconst bookmarkStore=() => {\n    return createStore(bookmarkReducer);\n};\nexport default bookmarkStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport bookmarkStore from './BookmarkStore'\ndocument.title='Bookmark Page'\nconst bookmarkPage=<Provider store={bookmarkStore()}><App/></Provider>\n\nReactDOM.render(bookmarkPage, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}