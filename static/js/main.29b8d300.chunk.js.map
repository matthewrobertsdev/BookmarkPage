{"version":3,"sources":["Actions.js","BookmarkReducer.js","BookmarkGrid.js","ToolBar.js","LinkModel.js","EntryModal.js","App.js","serviceWorker.js","BookmarkStore.js","index.js"],"names":["setMode","mode","type","setUpdatingName","name","setUpdatingURL","URL","initialState","bookmarks","localStorage","getItem","JSON","parse","checkedArray","numChecked","updateingBookmark","needsPassBookmark","updatingURL","updatingName","updatingIndex","saveBookmarks","setItem","stringify","bookmarkReducer","state","action","newBookmarks","console","log","slice","unshift","bookmark","i","length","push","newCheckedState","index","keptBookmarks","updatedBookMarks","UnconnectedBookmarkGrid","props","changeIndices","bind","sourceId","sourceIndex","targetIndex","targetId","nextState","swap","this","setBookmarks","GridContext","onChange","style","cursor","marginLeft","marginRight","GridDropZone","id","boxesPerRow","rowHeight","height","getHeightString","width","touchAction","getTouchActionString","textAlign","disableDrag","isRearrangeMode","disableDrop","className","getBookmarkGrid","map","item","GridItem","key","getGridItemStyleObject","onClick","updateBookmark","addForDelete","href","toString","checked","toggleCheckedState","setUpdatingIndex","pointer","display","borderRadius","padding","marginTop","React","Component","BookmarkGrid","connect","dispatch","UnconnectedToolBar","getRearrangeButtonColorStyle","toggleRearrangeMode","getDeleteButtonColorStyle","handleDeleteClick","getDeleteString","addCancelButton","getEditButtonColorStyle","handleEditClicked","getAddButtonColorStyle","handleCancelClick","createUncheckedArray","deleteChecked","changeEditMode","Toolbar","LinkModel","ReactModal","setAppElement","UnconnectedEntryModal","handleNameChange","handleURLChange","handleSubmit","event","target","value","addBookmark","clearUpdatingBookmark","isOpen","getTitleString","getSubmitString","handleCancel","EntryModal","UnconnectedApp","ToolBar","getBookmarkContent","App","Boolean","window","location","hostname","match","bookmarkStore","createStore","document","title","bookmarkPage","store","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVACaA,EAAU,SAACC,GAAD,MAAW,CAAEC,KAAM,WAAYD,SAYzCE,EAAkB,SAACC,GAAD,MAAW,CAAEF,KAAM,oBAAqBE,SAE1DC,EAAiB,SAACC,GAAD,MAAU,CAAEJ,KAAM,mBAAoBI,Q,ikBCfpE,IAAMC,EAAe,CAAEC,UAmE2B,MAA1CC,aAAaC,QAAQ,kBACdC,KAAKC,MAAMH,aAAaC,QAAQ,mBAEhC,GAtEwCT,KAAM,OAAQY,aAAc,GAAIC,WAAY,EACnGC,kBAAmB,KAAMC,mBAAmB,EAAOC,YAAa,GAAIC,aAAc,GAAIC,cAAe,MA6DxFC,EAAc,SAAuBZ,GAC9CC,aAAaY,QAAQ,iBAAkBV,KAAKW,UAAUd,KAW3Ce,MAvES,WAAmC,IAAlCC,EAAiC,uDAAzBjB,EAAckB,EAAW,uCACtD,OAAQA,EAAOvB,MACX,IAAK,oBACG,OAAO,EAAP,GAAYsB,EAAZ,CAAmBN,aAAcO,EAAOrB,OAChD,IAAK,mBACG,OAAO,EAAP,GAAYoB,EAAZ,CAAmBP,YAAaQ,EAAOnB,MAC/C,IAAK,WACD,OAAO,EAAP,GAAYkB,EAAZ,CAAmBvB,KAAMwB,EAAOxB,OACpC,IAAK,gBACD,OAAO,EAAP,GAAYuB,EAAZ,CAAmBhB,UAAWiB,EAAOjB,YACzC,IAAK,eACD,IAAIkB,EAAa,GASjB,OARsB,OAAlBF,EAAMhB,WACNmB,QAAQC,OACRF,EAAeF,EAAMhB,UAAUqB,MAAM,IACxBC,QAAQL,EAAOM,WAE5BL,EAAa,CAACD,EAAOM,UAEzBX,EAAcM,GACP,EAAP,GAAYF,EAAZ,CAAmBhB,UAAWkB,IAClC,IAAK,yBAED,IADA,IAAIb,EAAe,GACVmB,EAAI,EAAGA,EAAIR,EAAMhB,UAAUyB,OAAQD,IACxCnB,EAAaqB,MAAK,GAEtB,OAAO,EAAP,GAAYV,EAAZ,CAAmBX,aAAcA,EAAcC,WAAY,IAC/D,IAAK,wBACD,IAAIqB,EAAkBX,EAAMX,aAAagB,MAAM,GAC/CM,EAAgBV,EAAOW,QAAUD,EAAgBV,EAAOW,OAExD,IADA,IAAItB,EAAa,EACRkB,EAAI,EAAGA,EAAIG,EAAgBF,OAAQD,IACpCG,EAAgBH,KAChBlB,GAAc,GAGtB,OAAO,EAAP,GAAYU,EAAZ,CAAmBX,aAAcsB,EAAiBrB,WAAYA,IAClE,IAAK,iBAED,IADA,IAAIuB,EAAgB,GACXL,EAAI,EAAGA,EAAIR,EAAMhB,UAAUyB,OAAQD,IACnCR,EAAMX,aAAamB,IACpBK,EAAcH,KAAKV,EAAMhB,UAAUwB,IAI3C,OADAZ,EAAciB,GACP,EAAP,GAAYb,EAAZ,CAAmBhB,UAAW6B,EAAevB,WAAY,IAC7D,IAAK,qBACG,OAAO,EAAP,GAAWU,EAAX,CAAkBY,MAAOX,EAAOW,QACxC,IAAK,kBACG,IAAIE,EAAiBd,EAAMhB,UAG3B,OAFA8B,EAAiBb,EAAOW,OAAOX,EAAOM,SACtCX,EAAckB,GACP,EAAP,GAAYd,EAAZ,CAAmBhB,UAAW8B,IACtC,QACI,OAAOd,IC/Bbe,E,YAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,cAAgB,EAAKA,cAAcC,KAAnB,gBAFN,E,2EAMLC,EAAUC,EAAaC,EAAaC,GAC9C,IAAMC,EAAYC,YAAKC,KAAKT,MAAMhC,UAAWoC,EAAaC,GAC1DI,KAAKT,MAAMU,aAAaH,GACxB3B,EAAc2B,K,+BAId,OAAQ,kBAACI,EAAA,EAAD,CAAqBC,SAAUH,KAAKR,cAAeY,MAAO,CAAEC,OAAQ,UAAWC,WAAY,MAAOC,YAAa,QACnH,kBAACC,EAAA,EAAD,CAAcC,GAAG,QAAQC,YAAa,EAAGC,UAAW,GAChDP,MAAO,CACHQ,OAAQZ,KAAKa,kBAAmBC,MAAO,MAAOC,YAAaf,KAAKgB,uBAAwBX,OAAQ,UAChGY,UAAW,SAAUX,WAAY,MAAOC,YAAa,OAEzDW,aAAclB,KAAKmB,kBAAmBC,aAAcpB,KAAKmB,kBAAmBE,UAAU,iBACrFrB,KAAKsB,sB,wCAKC,IAAD,OACd,OAAOtB,KAAKT,MAAMhC,UAAUgE,KAAI,SAACC,EAAMrC,GACnC,MAAwB,cAApB,EAAKI,MAAMvC,KACJ,kBAACyE,EAAA,EAAD,CAAUC,IAAKvC,GAClB,2BAAOiB,MAAO,EAAKuB,uBAAuB,OAAQ,WAC9CN,UAAU,eACTG,EAAKrE,MAHP,KAKoB,SAApB,EAAKoC,MAAMvC,MAAuC,WAApB,EAAKuC,MAAMvC,KACzC,kBAACyE,EAAA,EAAD,CAAUC,IAAKvC,GAClB,2BAAOiB,MAAO,EAAKuB,uBAAuB,OAAQ,WAC9CN,UAAU,cAAcO,QAAS,WAAQ,EAAKC,eAAe1C,EAAOqC,KACnEA,EAAKrE,MAHP,KAOA,kBAACsE,EAAA,EAAD,CAAUC,IAAKvC,GACjB,EAAK2C,aAAa3C,GACnB,uBAAG4C,KAAMP,EAAKnE,IAAK+C,MAAO,EAAKuB,uBAAuB,UAAW,WAC7DN,UAAU,eACTG,EAAKrE,MAJP,U,wCAWf,OAAsC,GAA9B6C,KAAKT,MAAMhC,UAAUyB,QAAagD,WAAa,O,6CAIvD,OAAOhC,KAAKmB,kBAAoB,OAAS,Y,wCAIzC,OAAOnB,KAAKmB,kBAAoB,UAAY,Y,wCAI5C,MAA2B,cAApBnB,KAAKT,MAAMvC,O,mCAGTmC,GAAQ,IAAD,OAChB,GAAwB,WAApBa,KAAKT,MAAMvC,KACX,OAAO,2BAAOC,KAAK,WAAWgF,QAASjC,KAAKT,MAAM3B,aAAauB,GAC3DgB,SAAU,kBAAM,EAAKZ,MAAM2C,mBAAmB/C,IAAQkC,UAAU,uB,qCAI7DlC,EAAOL,GAClBkB,KAAKT,MAAMxC,QAAQ,UACnBiD,KAAKT,MAAM4C,iBAAiBhD,GAC5Ba,KAAKT,MAAMrC,gBAAgB4B,EAAS3B,MACpC6C,KAAKT,MAAMnC,eAAe0B,EAASzB,O,6CAGhB0D,EAAaqB,GAChC,MAAO,CACHxB,OAAQ,MAAOyB,QAAS,eAAgBtB,YAAaA,EACrDV,OAAQ+B,EAASnB,UAAW,SAAUqB,aAAc,OACpDC,QAAS,WAAYC,UAAW,W,GAvFNC,IAAMC,WA6F7BC,EADMC,aA5GG,SAACrE,GACrB,MAAO,CACHhB,UAAWgB,EAAMhB,UAAWP,KAAMuB,EAAMvB,KACxCY,aAAcW,EAAMX,iBAGD,SAACiF,GACxB,MAAO,CACH5C,aAAc,SAAC1C,GAAgBsF,EFfX,SAACtF,GAAD,MAAgB,CAAEN,KAAM,gBAAiBM,aEerB0C,CAAa1C,KACrD2E,mBAAoB,SAAC/C,GAAY0D,EFVP,SAAC1D,GAAD,MAAY,CAAElC,KAAM,wBAAyBkC,SEU7B+C,CAAmB/C,KAC7DpC,QAAS,SAACC,GAAW6F,EAAS9F,EAAQC,KACtCmF,iBAAkB,SAAChD,GAAY0D,EFJP,SAAC1D,GAAD,MAAY,CAAElC,KAAM,qBAAsBkC,SEI1BgD,CAAiBhD,KACzDjC,gBAAiB,SAACC,GAAW0F,EAAS3F,EAAgBC,KACtDC,eAAgB,SAACC,GAAUwF,EAASzF,EAAeC,QA+FtCuF,CAA6CtD,GC5G5DwD,E,iLAEO,IAAD,OAAC,OACL,wBAAIzB,UAAU,YACd,wBAAIA,UAAW,aAAarB,KAAK+C,+BACjCnB,QAAS,kBAAI,EAAKoB,wBADlB,aAEA,wBAAI3B,UAAW,aAAarB,KAAKiD,4BACjCrB,QAAS,kBAAI,EAAKsB,sBAAsBlD,KAAKmD,mBAC5CnD,KAAKoD,kBACN,wBAAI/B,UAAW,aAAarB,KAAKqD,0BAA2BzB,QAAS,kBAAI,EAAK0B,sBAA9E,QACA,wBAAIjC,UAAW,aAAarB,KAAKuD,yBAA0B3B,QAAS,kBAAI,EAAKrC,MAAMxC,QAAQ,SAA3F,U,+CAKA,MAAyB,QAAlBiD,KAAKT,MAAMvC,KAAe,yCAAyC,e,qDAI1E,MAAyB,cAAlBgD,KAAKT,MAAMvC,KAAqB,+CAA+C,qB,kDAItF,MAAyB,WAAlBgD,KAAKT,MAAMvC,KAAkB,4CAA4C,kB,gDAIhF,MAA0B,SAAlBgD,KAAKT,MAAMvC,MAAiC,WAAlBgD,KAAKT,MAAMvC,KAAmB,0CAA0C,gB,4CAIpF,cAAlBgD,KAAKT,MAAMvC,KACXgD,KAAKT,MAAMxC,QAAQ,QAEnBiD,KAAKT,MAAMxC,QAAQ,e,uCAKD,SAAlBiD,KAAKT,MAAMvC,KACXgD,KAAKT,MAAMxC,QAAQ,QACM,WAAlBiD,KAAKT,MAAMvC,KAClBgD,KAAKT,MAAMxC,QAAQ,SACZiD,KAAKT,MAAMvC,KAClBgD,KAAKT,MAAMxC,QAAQ,W,wCAMT,IAAD,OACb,GAAsB,WAAlBiD,KAAKT,MAAMvC,KACX,OAAO,wBAAIqE,UAAU,0BAA0BO,QAAS,WAAK,EAAK4B,sBAA3D,Y,0CAKXxD,KAAKT,MAAMxC,QAAQ,QACnBiD,KAAKT,MAAMkE,yB,0CAIU,WAAlBzD,KAAKT,MAAMvC,MACVgD,KAAKT,MAAMkE,uBACXzD,KAAKT,MAAMxC,QAAQ,YAEhBiD,KAAKT,MAAM1B,WAAW,GACrBmC,KAAKT,MAAMmE,gBAEf1D,KAAKT,MAAMxC,QAAQ,W,0CAKvBiD,KAAK2D,mB,wCAIL,OAA4B,IAAxB3D,KAAKT,MAAM1B,WACJ,SAEA,WAAWmC,KAAKT,MAAM1B,WAAWmE,WAAW,Q,GAjF9BS,IAAMC,WAwFxBkB,EADChB,aA7FQ,SAACrE,GAAY,MAAO,CAACvB,KAAMuB,EAAMvB,KAAMO,UAAWgB,EAAMhB,UAChFM,WAAYU,EAAMV,eACS,SAACgF,GACxB,MAAO,CAAE9F,QAAS,SAACC,GAAW6F,EAAS9F,EAAQC,KAC/CyG,qBAAsB,WAAQZ,EHDS,CAAE5F,KAAM,4BGE/CyG,cAAe,WAAQb,EHES,CAAE5F,KAAM,uBGsF5B2F,CAA6CE,G,iBCzF9Ce,EALX,WAAY1G,EAAME,GAAK,oBACnB2C,KAAK7C,KAAKA,EACV6C,KAAK3C,IAAIA,GCWhByG,IAAWC,cAAc,S,IACpBC,E,YAEF,WAAYzE,GAAQ,IAAD,8BACf,4CAAMA,KAED0E,iBAAmB,EAAKA,iBAAiBxE,KAAtB,gBACxB,EAAKyE,gBAAkB,EAAKA,gBAAgBzE,KAArB,gBACvB,EAAK0E,aAAe,EAAKA,aAAa1E,KAAlB,gBALL,E,8EAQA2E,GACbpE,KAAKT,MAAMrC,gBAAgBkH,EAAMC,OAAOC,S,8CAI1CtE,KAAKT,MAAMrC,gBAAgB,IAC3B8C,KAAKT,MAAMnC,eAAe,M,sCAGZgH,GACdpE,KAAKT,MAAMnC,eAAegH,EAAMC,OAAOC,S,qCAIT,KAA1BtE,KAAKT,MAAMtB,cAA4C,KAAzB+B,KAAKT,MAAMvB,cACpB,QAAlBgC,KAAKT,MAAMvC,MACZgD,KAAKT,MAAMgF,YAAY,IAAIV,EAAU7D,KAAKT,MAAMtB,aAAc+B,KAAKT,MAAMvB,cACzEgC,KAAKT,MAAMxC,QAAQ,SACQ,WAAlBiD,KAAKT,MAAMvC,OACpBgD,KAAKT,MAAMsC,eAAe7B,KAAKT,MAAMJ,MAAO,IAAI0E,EAAU7D,KAAKT,MAAMtB,aAAc+B,KAAKT,MAAMvB,cAC9FgC,KAAKT,MAAMxC,QAAQ,SAErBiD,KAAKwE,2B,qCAMY,QAAlBxE,KAAKT,MAAMvC,KACZgD,KAAKT,MAAMxC,QAAQ,QACQ,WAAlBiD,KAAKT,MAAMvC,MACpBgD,KAAKT,MAAMxC,QAAQ,QAErBiD,KAAKwE,0B,+BAGE,IAAD,OAAE,OAAQ,6BAChB,kBAAC,IAAD,CAAYnD,UAAU,eAAeoD,OAA0B,QAAlBzE,KAAKT,MAAMvC,MAAgC,WAAlBgD,KAAKT,MAAMvC,MAC/E,wBAAIqE,UAAU,mBAAmBrB,KAAK0E,kBACxC,2BAAOrD,UAAU,mBAAjB,SACA,6BAAS,2BAAOA,UAAU,oBAAoBiD,MAAOtE,KAAKT,MAAMtB,aAAckC,SAAUH,KAAKiE,mBAAmB,6BAChH,2BAAO5C,UAAU,mBAAjB,QACA,6BAAS,2BAAOA,UAAU,cAAcpE,KAAK,MAAMqH,MAAOtE,KAAKT,MAAMvB,YAAamC,SAAUH,KAAKkE,kBAAkB,6BACnH,4BAAQ7C,UAAU,4BAA4BO,QAAS,kBAAI,EAAKuC,iBAAiBnE,KAAK2E,mBACtF,4BAAQtD,UAAU,4BAA4BO,QAAS,kBAAI,EAAKgD,iBAAhE,c,uCAKF,MAAsB,QAAlB5E,KAAKT,MAAMvC,KACN,gBACoB,SAAlBgD,KAAKT,MAAMvC,KACb,wBADF,I,wCAMP,MAAsB,QAAlBgD,KAAKT,MAAMvC,KACN,MACoB,WAAlBgD,KAAKT,MAAMvC,KACb,cADF,M,GArEuByF,IAAMC,WA4E3BmC,EADIjC,aArFK,SAACrE,GAAY,MAAO,CAACvB,KAAMuB,EAAMvB,KACvDgB,YAAaO,EAAMP,YAAaC,aAAcM,EAAMN,aAAckB,MAAOZ,EAAMY,MAC/E0C,eAAgBtD,EAAMsD,eAAgBtE,UAAWgB,EAAMhB,cAC9B,SAACsF,GAC3B,MAAO,CAAE9F,QAAS,SAACC,GAAW6F,EAAS9F,EAAQC,KAC9CuH,YAAa,SAACzF,GAAe+D,ELPJ,SAAC/D,GAAD,MAAe,CAAE7B,KAAM,eAAgB6B,YKO1ByF,CAAYzF,KAClD5B,gBAAgB,SAACC,GAAQ0F,EAAS3F,EAAgBC,KAClDC,eAAe,SAACC,GAAOwF,EAASzF,EAAeC,KAC/CwE,eAAe,SAAC1C,EAAOL,GAAY+D,ELIP,SAAC1D,EAAOL,GAAR,MAAsB,CAAE7B,KAAM,kBAAmBkC,QAAOL,YKJxC+C,CAAe1C,EAAOL,QA6EjD8D,CAA6CoB,GCpF1Dc,E,iLAGM,OAAQ,6BAAK,kBAACC,EAAD,MACnB,kBAAC,EAAD,MACA,6BAAS,6BAAS,6BAAS,6BAC3B,wBAAI1D,UAAU,sBAAd,aACA,6BAAUrB,KAAKgF,qBAAqB,6BAAS,6BAAS,gC,2CAIxD,OAA0B,MAAtBhF,KAAKT,MAAMhC,WAAiByC,KAAKT,MAAMhC,UAAUyB,OAAO,EACnD,kBAAC,EAAD,MAEA,wBAAIqC,UAAU,sBAAd,uD,GAdgBoB,IAAMC,WAsBpBuC,EAFHrC,aArBY,SAACrE,GAAY,MAAO,CAAChB,UAAWgB,EAAMhB,aAqBzB,KAAzBqF,CAA+BkC,GChBvBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCbSC,EAHK,WAChB,OAAOC,YAAYlH,ICIvBmH,SAASC,MAAM,gBACf,IAAMC,EAAa,kBAAC,IAAD,CAAUC,MAAOL,KAAiB,kBAAC,EAAD,OAErDM,IAASC,OAAOH,EAAcF,SAASM,eAAe,SFuHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.29b8d300.chunk.js","sourcesContent":["\nexport const setMode = (mode) => ({ type: 'SET_MODE', mode });\n\nexport const setBookmarks = (bookmarks) => ({ type: 'SET_BOOKMARKS', bookmarks });\n\nexport const addBookmark = (bookmark) => ({ type: 'ADD_BOOKMARK', bookmark });\n\nexport const createUncheckedArray = () => ({ type: 'CREATE_UNCHECKED_ARRAY' });\n\nexport const toggleCheckedState = (index) => ({ type: 'TOGGLED_CHECKED_STATE', index });\n\nexport const deleteChecked = () => ({ type: 'DELETE_CHECKED'});\n\nexport const setUpdatingName = (name) => ({ type: 'SET_UPDATING_NAME', name});\n\nexport const setUpdatingURL = (URL) => ({ type: 'SET_UPDATING_URL', URL});\n\nexport const setUpdatingIndex = (index) => ({ type: 'SET_UPDATING_INDEX', index});\n\nexport const updateBookmark = (index, bookmark) => ({ type: 'UPDATE_BOOKMARK', index, bookmark});","const initialState = { bookmarks: getSavedBookmarks(), mode: 'none', checkedArray: [], numChecked: 0,\nupdateingBookmark: null, needsPassBookmark: false, updatingURL: '', updatingName: '', updatingIndex: null};\n\nconst bookmarkReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_UPDATING_NAME':\n                return { ...state, updatingName: action.name}\n        case 'SET_UPDATING_URL':\n                return { ...state, updatingURL: action.URL}\n        case 'SET_MODE':\n            return { ...state, mode: action.mode };\n        case 'SET_BOOKMARKS':\n            return { ...state, bookmarks: action.bookmarks }\n        case 'ADD_BOOKMARK':\n            let newBookmarks=[]\n            if (state.bookmarks!==null){\n                console.log()\n                newBookmarks = state.bookmarks.slice(0);\n                newBookmarks.unshift(action.bookmark);\n            } else {\n                newBookmarks=[action.bookmark]\n            }\n            saveBookmarks(newBookmarks);\n            return { ...state, bookmarks: newBookmarks }\n        case 'CREATE_UNCHECKED_ARRAY':\n            let checkedArray = []\n            for (let i = 0; i < state.bookmarks.length; i++) {\n                checkedArray.push(false)\n            }\n            return { ...state, checkedArray: checkedArray, numChecked: 0}\n        case 'TOGGLED_CHECKED_STATE':\n            let newCheckedState = state.checkedArray.slice(0);\n            newCheckedState[action.index] = !newCheckedState[action.index]\n            let numChecked = 0;\n            for (let i = 0; i < newCheckedState.length; i++) {\n                if (newCheckedState[i]) {\n                    numChecked += 1;\n                }\n            }\n            return { ...state, checkedArray: newCheckedState, numChecked: numChecked }\n        case 'DELETE_CHECKED':\n            let keptBookmarks = [];\n            for (let i = 0; i < state.bookmarks.length; i++) {\n                if (!state.checkedArray[i]) {\n                    keptBookmarks.push(state.bookmarks[i])\n                }\n            }\n            saveBookmarks(keptBookmarks);\n            return { ...state, bookmarks: keptBookmarks, numChecked: 0 }\n        case 'SET_UPDATING_INDEX':\n                return {...state, index: action.index}\n        case 'UPDATE_BOOKMARK':\n                let updatedBookMarks=state.bookmarks\n                updatedBookMarks[action.index]=action.bookmark\n                saveBookmarks(updatedBookMarks);\n                return { ...state, bookmarks: updatedBookMarks}\n        default:\n            return state;\n    }\n\n}\n\nexport const saveBookmarks=function saveBookmarks(bookmarks) {\n    localStorage.setItem('savedBookmarks', JSON.stringify(bookmarks))\n}\n\nfunction getSavedBookmarks() {\n    if (localStorage.getItem('savedBookmarks') != null) {\n        return JSON.parse(localStorage.getItem('savedBookmarks'));\n    } else {\n        return [];\n    }\n}\n\nexport default bookmarkReducer","import React from 'react';\nimport './app.css';\nimport { GridContextProvider, GridDropZone, GridItem, swap } from \"react-grid-dnd\";\nimport { connect } from 'react-redux';\nimport {\n    setBookmarks, toggleCheckedState, setMode, setUpdatingIndex, setUpdatingName,\n    setUpdatingURL\n} from './Actions'\nimport { saveBookmarks } from './BookmarkReducer';\n\nconst mapStateToProps = (state) => {\n    return {\n        bookmarks: state.bookmarks, mode: state.mode,\n        checkedArray: state.checkedArray\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setBookmarks: (bookmarks) => { dispatch(setBookmarks(bookmarks)); },\n        toggleCheckedState: (index) => { dispatch(toggleCheckedState(index)); },\n        setMode: (mode) => { dispatch(setMode(mode)); },\n        setUpdatingIndex: (index) => { dispatch(setUpdatingIndex(index)) },\n        setUpdatingName: (name) => { dispatch(setUpdatingName(name)); },\n        setUpdatingURL: (URL) => { dispatch(setUpdatingURL(URL)) }\n    }\n};\nclass UnconnectedBookmarkGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeIndices = this.changeIndices.bind(this);\n    }\n\n    // target id will only be set if dragging from one dropzone to another.\n    changeIndices(sourceId, sourceIndex, targetIndex, targetId) {\n        const nextState = swap(this.props.bookmarks, sourceIndex, targetIndex);\n        this.props.setBookmarks(nextState);\n        saveBookmarks(nextState);\n    }\n\n    render() {\n        return (<GridContextProvider onChange={this.changeIndices} style={{ cursor: 'default', marginLeft: '0px', marginRight: '0px' }}>\n            <GridDropZone id=\"items\" boxesPerRow={1} rowHeight={40}\n                style={{\n                    height: this.getHeightString(), width: '80%', touchAction: this.getTouchActionString(), cursor: 'default',\n                    textAlign: 'center', marginLeft: '10%', marginRight: '10%'\n                }}\n                disableDrag={!this.isRearrangeMode()} disableDrop={!this.isRearrangeMode()} className='bookmark-grid'>\n                {this.getBookmarkGrid()}\n            </GridDropZone>\n        </GridContextProvider>);\n    }\n\n    getBookmarkGrid() {\n        return this.props.bookmarks.map((item, index) => {\n            if (this.props.mode === 'rearrange') {\n                return <GridItem key={index}>\n                    <label style={this.getGridItemStyleObject('none', 'default')}\n                        className='link-button'>\n                        {item.name}\n                    </label> </GridItem>\n            } else if (this.props.mode === 'edit' || this.props.mode === 'update') {\n                return <GridItem key={index}>\n                    <label style={this.getGridItemStyleObject('none', 'default')}\n                        className='link-button' onClick={() => { this.updateBookmark(index, item) }}>\n                        {item.name}\n                    </label> </GridItem>\n\n            } else {\n                return <GridItem key={index}>\n                    {this.addForDelete(index)}\n                    <a href={item.URL} style={this.getGridItemStyleObject('default', 'pointer')}\n                        className='link-button'>\n                        {item.name}\n                    </a> </GridItem>\n            }\n        })\n    }\n\n    getHeightString() {\n        return (this.props.bookmarks.length * 40).toString() + 'px';\n    }\n\n    getTouchActionString() {\n        return this.isRearrangeMode() ? 'none' : 'default';\n    }\n\n    getCursorString() {\n        return this.isRearrangeMode() ? 'default' : 'pointer';\n    }\n\n    isRearrangeMode() {\n        return this.props.mode === 'rearrange'\n    }\n\n    addForDelete(index) {\n        if (this.props.mode === 'delete') {\n            return <input type='checkbox' checked={this.props.checkedArray[index]}\n                onChange={() => this.props.toggleCheckedState(index)} className='delete-check-box'></input>\n        }\n    }\n\n    updateBookmark(index, bookmark) {\n        this.props.setMode('update');\n        this.props.setUpdatingIndex(index);\n        this.props.setUpdatingName(bookmark.name);\n        this.props.setUpdatingURL(bookmark.URL);\n    }\n\n    getGridItemStyleObject(touchAction, pointer) {\n        return {\n            height: \"50%\", display: 'inline-block', touchAction: touchAction,\n            cursor: pointer, textAlign: 'center', borderRadius: '10px',\n            padding: '3px 11px', marginTop: '8px'\n        }\n    }\n\n}\nconst BookmarkGrid = connect(mapStateToProps, mapDispatchToProps)(UnconnectedBookmarkGrid)\nexport default BookmarkGrid;","import React from 'react';\nimport './app.css';\nimport {setMode, createUncheckedArray, deleteChecked} from './Actions'\nimport { connect } from 'react-redux';\nconst mapStateToProps = (state) => { return {mode: state.mode, bookmarks: state.bookmarks,\nnumChecked: state.numChecked} };\nconst mapDispatchToProps = (dispatch) => {\n    return { setMode: (mode) => { dispatch(setMode(mode)); },\n    createUncheckedArray: () => { dispatch(createUncheckedArray()); },\n    deleteChecked: () => { dispatch(deleteChecked());} }};\nclass UnconnectedToolBar extends React.Component{\n\n    render(){return (\n        <ul className='tool-bar'>\n        <li className={'tool-item '+this.getRearrangeButtonColorStyle()}\n        onClick={()=>this.toggleRearrangeMode()}>Rearrange</li>\n        <li className={'tool-item '+this.getDeleteButtonColorStyle()}\n        onClick={()=>this.handleDeleteClick()}>{this.getDeleteString()}</li>\n        {this.addCancelButton()}\n        <li className={'tool-item '+this.getEditButtonColorStyle()} onClick={()=>this.handleEditClicked()}>Edit</li>\n        <li className={'tool-item '+this.getAddButtonColorStyle()} onClick={()=>this.props.setMode('add')}>Add</li>\n        {/*<li className='tool-item settings-button'>Settings</li>*/}\n        </ul>);};\n\n    getAddButtonColorStyle(){\n        return this.props.mode==='add' ? 'tool-item-selected add-button-selected':'add-button';\n    }\n\n    getRearrangeButtonColorStyle(){\n        return this.props.mode==='rearrange' ? 'tool-item-selected rearrange-button-selected':'rearrange-button';\n    }\n\n    getDeleteButtonColorStyle(){\n        return this.props.mode==='delete' ? 'tool-item-selected delete-button-selected':'delete-button';\n    }\n\n    getEditButtonColorStyle(){\n        return (this.props.mode==='edit'||this.props.mode==='update') ? 'tool-item-selected edit-button-selected':'edit-button';\n    }\n\n    toggleRearrangeMode(){\n        if (this.props.mode==='rearrange'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('rearrange')\n        }\n    }\n\n    changeEditMode(){\n        if (this.props.mode==='edit'){\n            this.props.setMode('none')\n        } else if (this.props.mode==='update'){\n            this.props.setMode('edit')\n        } else if (this.props.mode==='none'){\n            this.props.setMode('edit')\n        } else{\n            this.props.setMode('edit')\n        }\n    }\n\n    addCancelButton(){\n        if (this.props.mode==='delete'){\n            return <li className='tool-item cancel-button' onClick={()=>{this.handleCancelClick()}}>Cancel</li>\n        }\n    }\n\n    handleCancelClick(){\n        this.props.setMode('none');\n        this.props.createUncheckedArray();\n    }\n\n    handleDeleteClick(){\n        if(this.props.mode!=='delete'){\n            this.props.createUncheckedArray();\n            this.props.setMode('delete');\n        } else {\n            if(this.props.numChecked>0){\n                this.props.deleteChecked();\n            }\n            this.props.setMode('none');\n        }\n    }\n\n    handleEditClicked(){\n        this.changeEditMode()\n    }\n\n    getDeleteString(){\n        if (this.props.numChecked===0){\n            return 'Delete';\n        } else {\n            return 'Delete ('+this.props.numChecked.toString()+')'\n        }\n    }\n\n}\n\nconst Toolbar = connect(mapStateToProps, mapDispatchToProps)(UnconnectedToolBar)\nexport default Toolbar;","class LinkModel{\n    name\n    URL\n    constructor(name, URL){\n        this.name=name;\n        this.URL=URL;\n    }\n}\nexport default LinkModel;","import React from 'react';\nimport './app.css';\nimport ReactModal from 'react-modal';\nimport {setMode, addBookmark, setUpdatingName, setUpdatingURL, updateBookmark} from './Actions'\nimport { connect } from 'react-redux';\nimport LinkModel from './LinkModel';\n\nconst mapStateToProps = (state) => { return {mode: state.mode,\n  updatingURL: state.updatingURL, updatingName: state.updatingName, index: state.index,\n  updateBookmark: state.updateBookmark, bookmarks: state.bookmarks}};\nconst mapDispatchToProps = (dispatch) => {\n return { setMode: (mode) => { dispatch(setMode(mode)); },\n  addBookmark: (bookmark) => { dispatch(addBookmark(bookmark)); },\n  setUpdatingName:(name)=>{dispatch(setUpdatingName(name)); },\n  setUpdatingURL:(URL)=>{dispatch(setUpdatingURL(URL)); },\n  updateBookmark:(index, bookmark)=>{dispatch(updateBookmark(index, bookmark)); }}}\n ReactModal.setAppElement('#root');\nclass UnconnectedEntryModal extends React.Component{\n\n    constructor(props) {\n        super(props);\n    \n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleNameChange(event) {\n          this.props.setUpdatingName(event.target.value);\n      }\n\n      clearUpdatingBookmark(){\n        this.props.setUpdatingName('');\n        this.props.setUpdatingURL('');\n      }\n    \n      handleURLChange(event) {\n        this.props.setUpdatingURL(event.target.value)\n      }\n    \n      handleSubmit() {\n        if (this.props.updatingName!==''&&this.props.updatingURL!==''){\n            if(this.props.mode==='add'){\n              this.props.addBookmark(new LinkModel(this.props.updatingName, this.props.updatingURL));\n              this.props.setMode('none');\n            } else if (this.props.mode==='update'){\n              this.props.updateBookmark(this.props.index, new LinkModel(this.props.updatingName, this.props.updatingURL));\n              this.props.setMode('edit');\n            }\n            this.clearUpdatingBookmark();\n        } else {\n        }\n      }\n\n      handleCancel(){\n        if(this.props.mode==='add'){\n          this.props.setMode('none')\n        } else if((this.props.mode==='update')){\n          this.props.setMode('edit');\n        }\n        this.clearUpdatingBookmark();\n      }\n\n      render(){ return (<div>\n        <ReactModal className=\"action-modal\" isOpen={this.props.mode==='add'||this.props.mode==='update'} >\n          <h1 className='modal-text-size'>{this.getTitleString()}</h1>\n        <label className='modal-text-size'>Name:</label>\n        <br></br><input className='modal-small-input' value={this.props.updatingName} onChange={this.handleNameChange}/><br></br>\n        <label className='modal-text-size'>URL:</label>\n        <br></br><input className='modal-input' type='url' value={this.props.updatingURL} onChange={this.handleURLChange}/><br></br>\n        <button className=\"link-button action-button\" onClick={()=>this.handleSubmit()}>{this.getSubmitString()}</button>\n        <button className=\"link-button action-button\" onClick={()=>this.handleCancel()}>Cancel</button>\n        </ReactModal></div>\n    );};\n\n    getTitleString(){\n      if (this.props.mode==='add'){\n        return 'Add Bookmark:'\n      } else if (this.props.mode==='edit'){\n        return 'Update Bookmark:'\n      }\n    }\n\n    getSubmitString(){\n      if (this.props.mode==='add'){\n        return 'Add'\n      } else if (this.props.mode==='update'){\n        return 'Update'\n      }\n    }\n\n}\nconst EntryModal = connect(mapStateToProps, mapDispatchToProps)(UnconnectedEntryModal)\nexport default EntryModal","import React from 'react';\nimport './app.css';\nimport BookmarkGrid from './BookmarkGrid';\nimport ToolBar from './ToolBar';\nimport EntryModal from './EntryModal';\nimport { connect } from 'react-redux';\n \nconst mapStateToProps = (state) => { return {bookmarks: state.bookmarks} };\nclass UnconnectedApp extends React.Component {\n  \n \n  render(){ return (<div><ToolBar/>\n      <EntryModal/>\n      <br></br><br></br><br></br><br></br>\n      <h1 className='text-on-background'>Bookmarks</h1>\n      <br></br>{this.getBookmarkContent()}<br></br><br></br><br></br></div>\n  );};\n\n  getBookmarkContent(){\n    if (this.props.bookmarks!=null&&this.props.bookmarks.length>0){\n      return <BookmarkGrid/>\n    } else {\n      return <h1 className='text-on-background'>Tap or click the \"Add\" button to add a bookmark</h1>\n    }\n  }\n\n  \n}\nconst App = connect(mapStateToProps, null)(UnconnectedApp)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore} from \"redux\";\nimport bookmarkReducer from './BookmarkReducer';\nconst bookmarkStore=() => {\n    return createStore(bookmarkReducer);\n};\nexport default bookmarkStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport bookmarkStore from './BookmarkStore'\ndocument.title='Bookmark Page'\nconst bookmarkPage=<Provider store={bookmarkStore()}><App/></Provider>\n\nReactDOM.render(bookmarkPage, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}