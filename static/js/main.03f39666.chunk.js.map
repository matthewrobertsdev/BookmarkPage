{"version":3,"sources":["Actions.js","BookmarkReducer.js","BookmarkGrid.js","ToolBar.js","LinkModel.js","EntryModal.js","MoreModal.js","App.js","serviceWorker.js","BookmarkStore.js","index.js"],"names":["setMode","mode","type","setBookmarks","bookmarks","setUpdatingName","name","setUpdatingURL","URL","initialState","localStorage","getItem","undefined","JSON","parse","e","getSavedBookmarks","checkedArray","numChecked","updateingBookmark","needsPassBookmark","updatingURL","updatingName","updatingIndex","validateBookmarks","validatedBookmarks","i","length","push","saveBookmarks","setItem","stringify","bookmarkReducer","state","action","newBookmarks","slice","unshift","bookmark","newCheckedState","index","keptBookmarks","updatedBookmarks","withAppend","concat","UnconnectedBookmarkGrid","props","changeIndices","bind","numColumns","Math","floor","window","innerWidth","resizeFunction","addEventListener","this","setState","sourceId","sourceIndex","targetIndex","targetId","nextState","swap","GridContext","onChange","style","cursor","marginLeft","marginRight","GridDropZone","id","boxesPerRow","rowHeight","height","getHeightString","width","touchAction","getTouchActionString","textAlign","disableDrag","isRearrangeMode","disableDrop","className","getBookmarkGrid","map","item","GridItem","key","getGridItemStyleObject","onClick","updateBookmark","addForDelete","href","toString","checked","toggleCheckedState","setUpdatingIndex","pointer","display","borderRadius","padding","marginTop","React","Component","BookmarkGrid","connect","dispatch","UnconnectedToolBar","getRearrangeButtonColorStyle","toggleRearrangeMode","getDeleteButtonColorStyle","handleDeleteClick","getDeleteString","addCancelButton","getEditButtonColorStyle","handleEditClicked","getAddButtonColorStyle","toggleAddMode","getMoreButtonColorStyle","toggleMoreMode","handleCancelClick","createUncheckedArray","deleteChecked","changeEditMode","Toolbar","LinkModel","ReactModal","setAppElement","UnconnectedEntryModal","handleNameChange","handleURLChange","handleSubmit","event","target","value","addBookmark","clearUpdatingBookmark","isOpen","getTitleString","getSubmitString","handleCancel","EntryModal","UnconnectedMoreModal","handleSaveClick","handleLoadMoreClick","handleLoadAndReplaceClick","append","reader","FileReader","file","document","getElementById","files","result","appendBookmarks","readAsText","downloadLink","Blob","download","createObjectURL","click","handleFileChosen","MoreModal","UnconnectedApp","handleKeyDown","handleSearch","searchText","searchEngine","handleSearchEngineChange","handleSearchChange","console","log","open","preventDefault","ToolBar","class","tabIndex","onKeyDown","getBookmarkContent","App","Boolean","location","hostname","match","bookmarkStore","createStore","title","bookmarkPage","store","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03f39666.chunk.js","sourcesContent":["\nexport const setMode = (mode) => ({ type: 'SET_MODE', mode });\n\nexport const setBookmarks = (bookmarks) => ({ type: 'SET_BOOKMARKS', bookmarks });\n\nexport const addBookmark = (bookmark) => ({ type: 'ADD_BOOKMARK', bookmark });\n\nexport const createUncheckedArray = () => ({ type: 'CREATE_UNCHECKED_ARRAY' });\n\nexport const toggleCheckedState = (index) => ({ type: 'TOGGLED_CHECKED_STATE', index });\n\nexport const deleteChecked = () => ({ type: 'DELETE_CHECKED'});\n\nexport const setUpdatingName = (name) => ({ type: 'SET_UPDATING_NAME', name});\n\nexport const setUpdatingURL = (URL) => ({ type: 'SET_UPDATING_URL', URL});\n\nexport const setUpdatingIndex = (index) => ({ type: 'SET_UPDATING_INDEX', index});\n\nexport const updateBookmark = (index, bookmark) => ({ type: 'UPDATE_BOOKMARK', index, bookmark});\n\nexport const appendBookmarks = (bookmarks) => ({ type: 'APPEND_BOOKMARKS', bookmarks});\n\n\n","const initialState = { bookmarks: getSavedBookmarks(), mode: 'none', checkedArray: [], numChecked: 0,\nupdateingBookmark: null, needsPassBookmark: false, updatingURL: '', updatingName: '', updatingIndex: null};\n\nconst bookmarkReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_UPDATING_NAME':\n                return { ...state, updatingName: action.name}\n        case 'SET_UPDATING_URL':\n                return { ...state, updatingURL: action.URL}\n        case 'SET_MODE':\n            return { ...state, mode: action.mode };\n        case 'SET_BOOKMARKS':\n            var validatedBookmarks=validateBookmarks(action.bookmarks);\n            saveBookmarks(validatedBookmarks);\n            return { ...state, bookmarks: validatedBookmarks }\n        case 'ADD_BOOKMARK':\n            let newBookmarks=[]\n            if (state.bookmarks!==null){\n                newBookmarks = state.bookmarks.slice(0);\n                newBookmarks.unshift(action.bookmark);\n            } else {\n                newBookmarks=[action.bookmark]\n            }\n            saveBookmarks(newBookmarks);\n            return { ...state, bookmarks: newBookmarks }\n        case 'CREATE_UNCHECKED_ARRAY':\n            let checkedArray = []\n            for (let i = 0; i < state.bookmarks.length; i++) {\n                checkedArray.push(false)\n            }\n            return { ...state, checkedArray: checkedArray, numChecked: 0}\n        case 'TOGGLED_CHECKED_STATE':\n            let newCheckedState = state.checkedArray.slice(0);\n            newCheckedState[action.index] = !newCheckedState[action.index]\n            let numChecked = 0;\n            for (let i = 0; i < newCheckedState.length; i++) {\n                if (newCheckedState[i]) {\n                    numChecked += 1;\n                }\n            }\n            return { ...state, checkedArray: newCheckedState, numChecked: numChecked }\n        case 'DELETE_CHECKED':\n            let keptBookmarks = [];\n            for (let i = 0; i < state.bookmarks.length; i++) {\n                if (!state.checkedArray[i]) {\n                    keptBookmarks.push(state.bookmarks[i])\n                }\n            }\n            saveBookmarks(keptBookmarks);\n            return { ...state, bookmarks: keptBookmarks, numChecked: 0 }\n        case 'SET_UPDATING_INDEX':\n                return {...state, index: action.index}\n        case 'UPDATE_BOOKMARK':\n                let updatedBookmarks=state.bookmarks\n                updatedBookmarks[action.index]=action.bookmark\n                saveBookmarks(updatedBookmarks);\n                return { ...state, bookmarks: updatedBookmarks}\n        case 'APPEND_BOOKMARKS':\n                let withAppend=state.bookmarks.concat(validateBookmarks(action.bookmarks));\n                saveBookmarks(withAppend);\n                return { ...state, bookmarks: withAppend}\n        default:\n            return state;\n    }\n\n}\n\nexport const validateBookmarks=function validateBookmarks(bookmarks){\n    var validatedBookmarks=[];\n    for(let i=0; i<bookmarks.length; i++){\n        if (bookmarks[i].name&&bookmarks[i].name!==null&&bookmarks[i].name!==undefined&&bookmarks[i].name!==''\n        &&bookmarks[i].URL&&bookmarks[i].URL!==null&&bookmarks[i].URL!==undefined&&bookmarks[i].URL!==''){\n            validatedBookmarks.push(bookmarks[i]);\n        }\n    }\n    return validatedBookmarks;\n}\n\nexport const saveBookmarks=function saveBookmarks(bookmarks) {\n    localStorage.setItem('savedBookmarks', JSON.stringify(bookmarks))\n}\n\nfunction getSavedBookmarks() {\n    if (localStorage.getItem('savedBookmarks') !== null&&localStorage.getItem('savedBookmarks')!==undefined) {\n        try{\n            return JSON.parse(localStorage.getItem('savedBookmarks'));\n        } catch(e){\n            return [];\n        }\n    } else {\n        return [];\n    }\n}\n\nexport default bookmarkReducer","import React from 'react';\nimport './app.css';\nimport { GridContextProvider, GridDropZone, GridItem, swap } from \"react-grid-dnd\";\nimport { connect } from 'react-redux';\nimport {\n    setBookmarks, toggleCheckedState, setMode, setUpdatingIndex, setUpdatingName,\n    setUpdatingURL\n} from './Actions'\nimport { saveBookmarks } from './BookmarkReducer';\n\nconst mapStateToProps = (state) => {\n    return {\n        bookmarks: state.bookmarks, mode: state.mode,\n        checkedArray: state.checkedArray\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setBookmarks: (bookmarks) => { dispatch(setBookmarks(bookmarks)); },\n        toggleCheckedState: (index) => { dispatch(toggleCheckedState(index)); },\n        setMode: (mode) => { dispatch(setMode(mode)); },\n        setUpdatingIndex: (index) => { dispatch(setUpdatingIndex(index)) },\n        setUpdatingName: (name) => { dispatch(setUpdatingName(name)); },\n        setUpdatingURL: (URL) => { dispatch(setUpdatingURL(URL)) }\n    }\n};\nclass UnconnectedBookmarkGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeIndices = this.changeIndices.bind(this);\n        this.state={numColumns: Math.floor(window.innerWidth/400)+1};\n        this.resizeFunction=this.resizeFunction.bind(this);\n        window.addEventListener('resize', this.resizeFunction);\n    }\n\n    resizeFunction(){\n        let numColumns=Math.floor(window.innerWidth/400)+1\n        if(this.state.numColumns!==numColumns){\n            this.setState({numColumns: numColumns});\n        }\n    }\n\n    // target id will only be set if dragging from one dropzone to another.\n    changeIndices(sourceId, sourceIndex, targetIndex, targetId) {\n        const nextState = swap(this.props.bookmarks, sourceIndex, targetIndex);\n        this.props.setBookmarks(nextState);\n        saveBookmarks(nextState);\n    }\n\n    render() {\n        return (<GridContextProvider onChange={this.changeIndices} style={{ cursor: 'default', marginLeft: '0px', marginRight: '0px' }}>\n            <GridDropZone id=\"items\" boxesPerRow={this.state.numColumns} rowHeight={40}\n                style={{\n                    height: this.getHeightString(), width: '80%', touchAction: this.getTouchActionString(), cursor: 'default',\n                    textAlign: 'center', marginLeft: '10%', marginRight: '10%'\n                }}\n                disableDrag={!this.isRearrangeMode()} disableDrop={!this.isRearrangeMode()} className='bookmark-grid'>\n                {this.getBookmarkGrid()}\n            </GridDropZone>\n        </GridContextProvider>);\n    }\n\n    getBookmarkGrid() {\n        return this.props.bookmarks.map((item, index) => {\n            if (this.props.mode === 'rearrange') {\n                return <GridItem key={index}>\n                    <label style={this.getGridItemStyleObject('none', 'default')}\n                        className='link-button'>\n                        {item.name}\n                    </label> </GridItem>\n            } else if (this.props.mode === 'edit' || this.props.mode === 'update') {\n                return <GridItem key={index}>\n                    <label style={this.getGridItemStyleObject('none', 'default')}\n                        className='link-button' onClick={() => { this.updateBookmark(index, item) }}>\n                        {item.name}\n                    </label> </GridItem>\n\n            } else {\n                return <GridItem key={index}>\n                    {this.addForDelete(index)}\n                    <a href={item.URL} style={this.getGridItemStyleObject('default', 'pointer')}\n                        className='link-button'>\n                        {item.name}\n                    </a> </GridItem>\n            }\n        })\n    }\n\n    getHeightString() {\n        let effectiveLength=0;\n        if (this.props.bookmarks.length%this.state.numColumns!==0){\n            effectiveLength=this.props.bookmarks.length+\n            (this.state.numColumns-this.props.bookmarks.length%this.state.numColumns);\n        } else {\n            effectiveLength=this.props.bookmarks.length;\n        }\n        return (effectiveLength * (40/this.state.numColumns)).toString() + 'px';\n    }\n\n    getTouchActionString() {\n        return this.isRearrangeMode() ? 'none' : 'default';\n    }\n\n    getCursorString() {\n        return this.isRearrangeMode() ? 'default' : 'pointer';\n    }\n\n    isRearrangeMode() {\n        return this.props.mode === 'rearrange'\n    }\n\n    addForDelete(index) {\n        if (this.props.mode === 'delete') {\n            return <input type='checkbox' checked={this.props.checkedArray[index]}\n                onChange={() => this.props.toggleCheckedState(index)} className='delete-check-box'></input>\n        }\n    }\n\n    updateBookmark(index, bookmark) {\n        this.props.setMode('update');\n        this.props.setUpdatingIndex(index);\n        this.props.setUpdatingName(bookmark.name);\n        this.props.setUpdatingURL(bookmark.URL);\n    }\n\n    getGridItemStyleObject(touchAction, pointer) {\n        return {\n            height: \"50%\", display: 'inline-block', touchAction: touchAction,\n            cursor: pointer, textAlign: 'center', borderRadius: '10px',\n            padding: '3px 11px', marginTop: '8px'\n        }\n    }\n\n}\nconst BookmarkGrid = connect(mapStateToProps, mapDispatchToProps)(UnconnectedBookmarkGrid)\nexport default BookmarkGrid;","import React from 'react';\nimport './app.css';\nimport {setMode, createUncheckedArray, deleteChecked} from './Actions'\nimport { connect } from 'react-redux';\nconst mapStateToProps = (state) => { return {mode: state.mode, bookmarks: state.bookmarks,\nnumChecked: state.numChecked} };\nconst mapDispatchToProps = (dispatch) => {\n    return { setMode: (mode) => { dispatch(setMode(mode)); },\n    createUncheckedArray: () => { dispatch(createUncheckedArray()); },\n    deleteChecked: () => { dispatch(deleteChecked());} }};\nclass UnconnectedToolBar extends React.Component{\n\n    render(){return (\n        <ul className='tool-bar'>\n        <li className={'tool-item '+this.getRearrangeButtonColorStyle()}\n        onClick={()=>this.toggleRearrangeMode()}>Rearrange</li>\n        <li className={'tool-item '+this.getDeleteButtonColorStyle()}\n        onClick={()=>this.handleDeleteClick()}>{this.getDeleteString()}</li>\n        {this.addCancelButton()}\n        <li className={'tool-item '+this.getEditButtonColorStyle()} \n        onClick={()=>this.handleEditClicked()}>Edit</li>\n        <li className={'tool-item '+this.getAddButtonColorStyle()} \n        onClick={()=>this.toggleAddMode()}>Add</li>\n        <li className={'tool-item '+this.getMoreButtonColorStyle()} \n        onClick={()=>this.toggleMoreMode()}>More</li>\n        </ul>);};\n\n    getAddButtonColorStyle(){\n        return this.props.mode==='add' ? 'tool-item-selected add-button-selected':'add-button';\n    }\n\n    getRearrangeButtonColorStyle(){\n        return this.props.mode==='rearrange' ? 'tool-item-selected rearrange-button-selected':'rearrange-button';\n    }\n\n    getDeleteButtonColorStyle(){\n        return this.props.mode==='delete' ? 'tool-item-selected delete-button-selected':'delete-button';\n    }\n\n    getEditButtonColorStyle(){\n        return (this.props.mode==='edit'||this.props.mode==='update') ? 'tool-item-selected edit-button-selected':'edit-button';\n    }\n\n    getMoreButtonColorStyle(){\n        return this.props.mode==='more' ? 'tool-item-selected more-button-selected':'more-button';\n    }\n\n    toggleAddMode(){\n        if (this.props.mode==='add'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('add')\n        }\n    }\n\n    toggleMoreMode(){\n        if (this.props.mode==='more'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('more')\n        }\n    }\n\n    toggleRearrangeMode(){\n        if (this.props.mode==='rearrange'){\n            this.props.setMode('none')\n        } else {\n            this.props.setMode('rearrange')\n        }\n    }\n\n    changeEditMode(){\n        if (this.props.mode==='edit'){\n            this.props.setMode('none')\n        } else if (this.props.mode==='update'){\n            this.props.setMode('edit')\n        } else if (this.props.mode==='none'){\n            this.props.setMode('edit')\n        } else{\n            this.props.setMode('edit')\n        }\n    }\n\n    addCancelButton(){\n        if (this.props.mode==='delete'){\n            return <li className='tool-item cancel-button' onClick={()=>{this.handleCancelClick()}}>Cancel</li>\n        }\n    }\n\n    handleCancelClick(){\n        this.props.setMode('none');\n        this.props.createUncheckedArray();\n    }\n\n    handleDeleteClick(){\n        if(this.props.mode!=='delete'){\n            this.props.createUncheckedArray();\n            this.props.setMode('delete');\n        } else {\n            if(this.props.numChecked>0){\n                this.props.deleteChecked();\n            }\n            this.props.setMode('none');\n        }\n    }\n\n    handleEditClicked(){\n        this.changeEditMode()\n    }\n\n    getDeleteString(){\n        if (this.props.numChecked===0){\n            return 'Delete';\n        } else {\n            return 'Delete ('+this.props.numChecked.toString()+')'\n        }\n    }\n\n}\n\nconst Toolbar = connect(mapStateToProps, mapDispatchToProps)(UnconnectedToolBar)\nexport default Toolbar;","class LinkModel{\n    name\n    URL\n    constructor(name, URL){\n        this.name=name;\n        this.URL=URL;\n    }\n}\nexport default LinkModel;","import React from 'react';\nimport './app.css';\nimport ReactModal from 'react-modal';\nimport {setMode, addBookmark, setUpdatingName, setUpdatingURL, updateBookmark} from './Actions'\nimport { connect } from 'react-redux';\nimport LinkModel from './LinkModel';\n\nconst mapStateToProps = (state) => { return {mode: state.mode,\n  updatingURL: state.updatingURL, updatingName: state.updatingName, index: state.index,\n  updateBookmark: state.updateBookmark, bookmarks: state.bookmarks}};\nconst mapDispatchToProps = (dispatch) => {\n return { setMode: (mode) => { dispatch(setMode(mode)); },\n  addBookmark: (bookmark) => { dispatch(addBookmark(bookmark)); },\n  setUpdatingName:(name)=>{dispatch(setUpdatingName(name)); },\n  setUpdatingURL:(URL)=>{dispatch(setUpdatingURL(URL)); },\n  updateBookmark:(index, bookmark)=>{dispatch(updateBookmark(index, bookmark)); }}}\n ReactModal.setAppElement('#root');\nclass UnconnectedEntryModal extends React.Component{\n\n    constructor(props) {\n        super(props);\n    \n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleNameChange(event) {\n          this.props.setUpdatingName(event.target.value);\n      }\n\n      clearUpdatingBookmark(){\n        this.props.setUpdatingName('');\n        this.props.setUpdatingURL('');\n      }\n    \n      handleURLChange(event) {\n        this.props.setUpdatingURL(event.target.value)\n      }\n    \n      handleSubmit() {\n        if (this.props.updatingName!==''&&this.props.updatingURL!==''){\n            if(this.props.mode==='add'){\n              this.props.addBookmark(new LinkModel(this.props.updatingName, this.props.updatingURL));\n              this.props.setMode('none');\n            } else if (this.props.mode==='update'){\n              this.props.updateBookmark(this.props.index, new LinkModel(this.props.updatingName, this.props.updatingURL));\n              this.props.setMode('edit');\n            }\n            this.clearUpdatingBookmark();\n        } else {\n        }\n      }\n\n      handleCancel(){\n        if(this.props.mode==='add'){\n          this.props.setMode('none')\n        } else if((this.props.mode==='update')){\n          this.props.setMode('edit');\n        }\n        this.clearUpdatingBookmark();\n      }\n\n      render(){ return (<div>\n        <ReactModal className=\"action-modal\" isOpen={this.props.mode==='add'||this.props.mode==='update'} >\n          <h1 className='modal-text-size'>{this.getTitleString()}</h1>\n        <label className='modal-text-size'>Name:</label>\n        <br></br><input className='modal-small-input' value={this.props.updatingName} onChange={this.handleNameChange}/><br></br>\n        <label className='modal-text-size'>URL:</label>\n        <br></br><input className='modal-input' type='url' value={this.props.updatingURL} onChange={this.handleURLChange}/><br></br>\n        <button className=\"link-button action-button\" onClick={()=>this.handleSubmit()}>{this.getSubmitString()}</button>\n        <button className=\"link-button action-button\" onClick={()=>this.handleCancel()}>Cancel</button>\n        </ReactModal></div>\n    );};\n\n    getTitleString(){\n      if (this.props.mode==='add'){\n        return 'Add Bookmark:'\n      } else if (this.props.mode==='update'){\n        return 'Update Bookmark:'\n      }\n    }\n\n    getSubmitString(){\n      if (this.props.mode==='add'){\n        return 'Add'\n      } else if (this.props.mode==='update'){\n        return 'Update'\n      }\n    }\n\n}\nconst EntryModal = connect(mapStateToProps, mapDispatchToProps)(UnconnectedEntryModal)\nexport default EntryModal","import React from 'react';\nimport './app.css';\nimport ReactModal from 'react-modal';\nimport {setMode, appendBookmarks, setBookmarks} from './Actions'\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => { return {mode: state.mode, bookmarks: state.bookmarks}};\nconst mapDispatchToProps = (dispatch) => {\n return { setMode: (mode) => { dispatch(setMode(mode)); },\n appendBookmarks: (bookmarks) => { dispatch(appendBookmarks(bookmarks)); },\n setBookmarks: (bookmarks) => { dispatch(setBookmarks(bookmarks)); }}}\n ReactModal.setAppElement('#root');\nclass UnconnectedMoreModal extends React.Component{\n\n      render(){ return (<div>\n        <ReactModal className=\"action-modal\" isOpen={this.props.mode==='more'} >\n          <h1 className='modal-text-size-2'>More</h1>\n        <button href='' id='downloadButton' className='link-button action-button' onClick={()=>this.handleSaveClick()}>Download as JSON Text File</button>\n        <br></br>\n        <button className='link-button action-button' onClick={()=>this.handleLoadMoreClick()}>\n        Load More from JSON Text</button><input id='loadMoreButton' type=\"file\"/>\n        <br></br>\n        <button className='link-button action-button' onClick={()=>this.handleLoadAndReplaceClick()}>\n        Load and Replace from JSON Text</button><input id='loadAndReplaceButton' type=\"file\"/>\n        <br></br>\n        <button className='link-button action-button' onClick={()=>this.props.setMode('none')}>Done</button>\n        <a href='save' id='downloadLink' style={{display: 'none'}}>No Show with CSS</a>\n        </ReactModal></div>\n    );};\n\n    handleFileChosen(append, props){\n      let reader = new FileReader();\n      let file=null;\n      if(append){\n        file = document.getElementById('loadMoreButton').files[0];\n      } else {\n        file = document.getElementById('loadAndReplaceButton').files[0];\n      }\n      reader.addEventListener(\"loadend\", function() {\n        let bookmarks=JSON.parse(reader.result);\n        if(append){\n          props.appendBookmarks(bookmarks);\n        } else {\n          props.setBookmarks(bookmarks);\n        }\n      });\n      reader.readAsText(file);\n    }\n\n    handleSaveClick(){\n      let downloadLink=document.getElementById('downloadLink')\n      let file = new Blob([JSON.stringify(this.props.bookmarks)], {type: 'text/plain'});\n      downloadLink.download='bookmarks.txt';\n      downloadLink.href=URL.createObjectURL(file);\n      downloadLink.click();\n    }\n\n    handleLoadMoreClick(){\n      document.getElementById('loadMoreButton').addEventListener('change', ()=>this.handleFileChosen(true, this.props));\n      document.getElementById('loadMoreButton').click();\n    }\n\n    handleLoadAndReplaceClick(){\n      document.getElementById('loadAndReplaceButton').addEventListener('change', ()=>this.handleFileChosen(false, this.props));\n      document.getElementById('loadAndReplaceButton').click();\n    }\n\n}\nconst MoreModal = connect(mapStateToProps, mapDispatchToProps)(UnconnectedMoreModal)\nexport default MoreModal","import React from 'react';\nimport './app.css';\nimport BookmarkGrid from './BookmarkGrid';\nimport ToolBar from './ToolBar';\nimport EntryModal from './EntryModal';\nimport MoreModal from './MoreModal';\nimport { connect } from 'react-redux';\n \nconst mapStateToProps = (state) => { return {bookmarks: state.bookmarks} };\nclass UnconnectedApp extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {searchText: '', searchEngine: 'google'}\n    this.handleSearchEngineChange = this.handleSearchEngineChange.bind(this)\n    this.handleSearchChange = this.handleSearchChange.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n    this.handleKeyDown=this.handleKeyDown.bind(this)\n  }\n  \n  handleSearchChange(event) {\n    this.setState({searchText: event.target.value});\n  }\n\n  handleSearchEngineChange(event) {\n    this.setState({searchEngine: event.target.value});\n  }\n\n  handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      this.handleSearch(event)\n    }\n  }\n\n  handleSearch(event) {\n    console.log('Should search')\n    switch (this.state.searchEngine) {\n      case 'google':\n        window.open('http://google.com/search?q='+this.state.searchText, \"_self\");\n        break;\n      case 'duckduckgo':\n        window.open('http://duckduckgo.com/?q='+this.state.searchText+'&t=h_&ia=web', \"_self\");\n        break;\n      case 'bing':\n        window.open('http://bing.com/search?q='+this.state.searchText, \"_self\");\n        break;\n      default:\n        console.log(\"Invalid Search Engine\")\n    }\n    event.preventDefault();\n  }\n \n  render(){ return (<div><ToolBar/><EntryModal/><MoreModal/>\n      <br></br><br></br><br></br><br></br><br></br>\n      <div className='center'>\n        <select name=\"searchEngine\" id=\"searchEngine\" \n        className='search-select' value={this.state.searchEngine} \n        onChange={this.handleSearchEngineChange}>\n          <option value=\"google\">Google</option>\n          <option value=\"duckduckgo\">Duck Duck Go</option>\n          <option value=\"bing\">Bing</option>\n        </select >\n        <span className='spacer'></span>\n        <input class='search-input' tabIndex=\"1\" value={this.state.searchText} \n        onChange={this.handleSearchChange} onKeyDown={this.handleKeyDown}></input>\n        <span className='spacer'></span>\n        <button tabIndex='2' onClick={this.handleSearch} className='search-button'>Search</button></div>\n      <h1 className='text-on-background'>Bookmarks</h1>\n      <br></br>{this.getBookmarkContent()}<br></br><br></br><br></br></div>\n  );};\n\n  getBookmarkContent(){\n    if (this.props.bookmarks!=null&&this.props.bookmarks.length>0){\n      return <BookmarkGrid/>\n    } else {\n      return <h1 className='text-on-background'>Tap or click the \"Add\" button to add a bookmark</h1>\n    }\n  }\n\n  \n}\nconst App = connect(mapStateToProps, null)(UnconnectedApp)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore} from \"redux\";\nimport bookmarkReducer from './BookmarkReducer';\nconst bookmarkStore=() => {\n    return createStore(bookmarkReducer);\n};\nexport default bookmarkStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport bookmarkStore from './BookmarkStore'\ndocument.title='Bookmark Page'\nconst bookmarkPage=<Provider store={bookmarkStore()}><App/></Provider>\n\nReactDOM.render(bookmarkPage, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}